# Extra type enum
let rec extraEnums = \schema
  cond schema {
    {'type':(s: 'enum'), 'name':(s: name), ...}:
      {schema},
    {'type':(s: 'record'), 'name':(s: name), "fields": (a : fields), ...}:
      //rel.union(fields => extraEnums(.@item("type"))),
    (a: types):
      //rel.union(types >> cond . {{"name": (s: name), ...}:.} => .@item => extraEnums(.))
  }
;

let rec extraRecords = \schema 
  cond schema {
    {"type": (s: "record"), "name": (s: name), "fields": (a : fields), ...}:
      {name} | //rel.union(fields => extraRecords(.@item("type"))),
    (a: types): //rel.union(types >> cond . {{"name": (s: name), ...}:.} => .@item => extraRecords(.))
};

let avroTransform = \schema \appName \packageName
  # Load Avro spec whose format is protobuf 
  let schema = //encoding.json.decode(//os.file(schema));

$'
##########################################
##                                      ##
##  AUTOGENERATED CODE -- DO NOT EDIT!  ##
##                                      ##
##########################################
${appName}:
${'\t'}@package="${packageName}"
${'\t'}${extraEnums(schema) => //{./transformEnumToSysl}(.)}
';

avroTransform("./tests/fabric-entitlements.avsc", "Avro", "com.anzx")
# avroTransform("./tests/nested.avsc", "Avro", "com.anzx")