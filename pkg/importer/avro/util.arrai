# Utilities

let getAnnotationS = \item \name
    let annotation = item(name)? .s:"";
    let annotationTxt = cond annotation {"":"", _:name + '="' + annotation + '"'};
    annotationTxt
;

# Pretty annotation array
let prettyAnnotations = \annotationArray
    let str = $`${let a = annotationArray where .@item != ""; a >>> \i \item item::, }`;
    cond str {'':$'', _:$'[${str}]'}
;

# Transform Avro primitive types to Sysl ones
let transformPrimitiveType = \type
    cond type {
        'null': 'null',
        'boolean': 'bool',
        'int': 'int32',
        'long': 'int64',
        'float': 'float32',
        'double': 'float64',
        'bytes': "bytes",
        'string': 'string',
        _: "NotPrimitiveError"              
    }
;

let transformLogicalTypes = \type
type
;

let buildUnionTypes = \types
    let unionType = '!union ' + //seq.concat(types where .@item != 'null' rank (:.@) >> //str.title(.)) + ' ' + //seq.join(' ')(types);
    unionTypes with unionType
;

# Get type names from types which looks like:
# ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
let getTypeNames = \types
    types >> \t
        cond t {
            (:s): t,
            {'type':type, ...}: (s : t('name').s) 
        }
;

# 
let combineTypes = \types
    let types = getTypeNames(types) >> .s;
    cond //seq.contains(['null'])(types) {
        true:
            cond //seq.has_prefix(['null'])(types) {
                true: # types is ['null', 'string']
                    cond types count {
                        2: //seq.concat(types where .@item != 'null' rank (:.@)) + '?',
                        _: //seq.concat(types where .@item != 'null' rank (:.@) >> //str.title(.)) + '?'
                    }
                ,
                _: # types is ['string', 'null', ...]
                    cond types count {
                        2: //seq.concat(types where .@item != 'null' rank (:.@)) + '?',
                        _: //seq.concat(types where .@item != 'null' rank (:.@) >> //str.title(.)) + '?'
                    }
            }
        ,
        _: //seq.concat(types >> //str.title(.))
    }
;

let transformType = \type
    cond type {
        # (s: 'string') etc.
        (s: typeName):
            let primitive = transformPrimitiveType(typeName);
            cond primitive {
                "null": "string[~null]",
                _: primitive
            },
        (a: typeArray):
            # type can be ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
            # [(s: 'null'), (s: 'string')] to ['null', 'string']
            combineTypes(typeArray), 
        {'type': typeName, ...}:
            # it is array, map or fixed
            cond typeName.s {
                'array': 'sequence of ' + cond type {{'items': {'name': name, ...}, ...}: name.s, _: type('items').s},
                'map': 'set of ' + cond type {{'items': {'name': name, ...}, ...}: 'String' + name.s + 'Item', _: type('items').s},
                'fixed': 'fixed',
                _: type('name').s
            },
    }
;

let util = (
    : prettyAnnotations,
    : transformType,
    : getAnnotationS,
);
util