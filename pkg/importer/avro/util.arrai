# Utilities

let getAnnotationS = \item \name
    let annotation = item(name)? .s:"";
    let annotationTxt = cond annotation {"":"", _:name + '="' + annotation + '"'};
    annotationTxt
;

# Pretty annotation array
let prettyAnnotations = \annotationArray
    let str = $`${let a = annotationArray where .@item != ""; a >>> \i \item item::, }`;
    cond str {'':$'', _:$'[${str}]'}
;

# Transform Avro primitive types to Sysl ones
let transformPrimitiveType = \type
    cond type {
        'null': 'null',
        'boolean': 'bool',
        'int': 'int32',
        'long': 'int64',
        'float': 'float32',
        'double': 'float64',
        'bytes': "bytes",
        'string': 'string',
        _: "NotPrimitive"               
    }
;

# Transform Avro complex types to Sysl ones
let transformComplexType = \type
    cond type {
        'PerformedAction': 'PerformedAction'
    }
;

let buildUnionTypes = \types
    let unionType = '!union ' + //seq.concat(types where .@item != 'null' rank (:.@) >> //str.title(.)) + ' ' + //seq.join(' ')(types);
    unionTypes with unionType
;

# 
let combineTypes = \types
    let hasNull = //seq.contains(['null'])(types);
    cond hasNull {
        true:
            cond //seq.has_prefix(['null'])(types) {
                true: # types is ['null', 'string']
                    cond types count {
                        2: //seq.concat(types where .@item != 'null' rank (:.@)) + '?',
                        _: //seq.concat(types where .@item != 'null' rank (:.@) >> //str.title(.)) + '?'
                    }
                ,
                _: # types is ['string', 'null']
                    cond types count {
                        2: //seq.concat(types where .@item != 'null' rank (:.@)) + '?',
                        _: //seq.concat(types where .@item != 'null' rank (:.@) >> //str.title(.)) + $'?'
                    }
            }
        ,
        _: //seq.concat(types >> //str.title(.))
    }
;

let transformType = \type
    let sType = type.s?:""; # only one type
    let mTypes = type.a?:[]; # multiple types
    cond sType {
        "": # Multiple types
            combineTypes(mTypes >> .s), # [(s: 'null'), (s: 'string')] to ['null', 'string']
        _:  # Only one type 
            let primitive = transformPrimitiveType(sType);
            cond primitive {
                'NotPrimitive': transformComplexType(sType), 
                _: cond primitive {
                    "null": "string[~null]",
                    _: primitive
                }
            }
    }
;

let util = (
    : prettyAnnotations,
    : transformType,
    : getAnnotationS,
);
util