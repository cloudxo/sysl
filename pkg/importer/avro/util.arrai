# Utilities

# Pretty annotation array
let prettyAnnotations = \annotationArray
let str = $`${let a = annotationArray where .@item != ""; a >>> \i \item item::, }`;
cond str {'':$'', _:$'[${str}]'}
;

# Transform Avro primitive types to Sysl ones
let transformPrimitiveType = \type
    cond type {
        'null': 'null',
        'boolean': 'bool',
        'int': 'int32',
        'long': 'int64',
        'float': 'float32',
        'double': 'float64',
        'bytes': "bytes[size='8']",
        'string': 'string',
        _: "NotPrimitive"               
    }
;

# Transform Avro complex types to Sysl ones
let transformComplexType = \type
    cond type {
        'PerformedAction': 'PerformedAction'
    }
;

let combineNullType = \types
    let len = types count;
    cond len {
        2:  
    }    
;

let transformType = \type
    let sType = type.s?:""; # only one type
    let mTypes = type.a?:[]; # multiple types
    cond sType {
        "": # Multiple types
            mTypes >> 
                let primitive = transformPrimitiveType(.s); 
                cond primitive {
                    'NotPrimitive': transformComplexType(sType), 
                    _:  primitive
                },
        _:  # Only one type 
            let primitive = transformPrimitiveType(sType);
            cond primitive {
                'NotPrimitive': transformComplexType(sType), 
                _: cond primitive {
                    "null": "string[~null]",
                    _: primitive
                }
            }
    }
;

let hasNullType = \types
    let has = false;
    types >> cond . {
        "null": let has = true; 
    }
;

let util = (
    : prettyAnnotations,
    : transformType
);
util